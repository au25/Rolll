import React, { useState, useContext } from "react";
import {
  withStyles,
  makeStyles,
  ThemeProvider,
  createMuiTheme,
} from "@material-ui/core/styles";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import { withRouter } from "react-router";
import firebase from "../../firebase";
import { AuthContext } from "../../Auth";
import {
  CountryDropdown,
  RegionDropdown,
  CountryRegionData,
} from "react-country-region-selector";
import "./userSignupForm.css";
import FilledInput from "@material-ui/core/FilledInput";
import OutlinedInput from "@material-ui/core/OutlinedInput";
import InputLabel from "@material-ui/core/InputLabel";
import InputAdornment from "@material-ui/core/InputAdornment";
import FormHelperText from "@material-ui/core/FormHelperText";
import FormControl from "@material-ui/core/FormControl";
import Visibility from "@material-ui/icons/Visibility";
import VisibilityOff from "@material-ui/icons/VisibilityOff";
import IconButton from "@material-ui/core/IconButton";
import clsx from "clsx";
import Div100vh from "react-div-100vh";
// Required for side-effects
require("firebase/functions");

/**
 * CSS of the page
 */
const useStyles = makeStyles((theme) => ({
  root: {
    margin: "0 0 32px 0",
  },
  formContainer: {
    width: "100%",
    display: "flex",
    flexDirection: "column",
  },
  countryContainer: {
    margin: "0 0 28px 0",
    borderBottom: "1px solid rgba(0, 0, 0, 0.42)",
  },
  regionContainer: {
    borderBottom: "1px solid rgba(0, 0, 0, 0.42)",
  }
}));

const theme = createMuiTheme({
  overrides: {
    MuiFilledInput: {
      root: {
        margin: "0 0 28px 0",
        height: "60px",
        backgroundColor: "rgba(0, 0, 0, 0.05)",
      },
    },
    MuiInputLabel: {
      filled: {
        margin: "4px 0 0 0",
      },
    },
  },
});

/**
 * Currently unused validation styles
 */
const ValidationTextField = withStyles({
  root: {
    "& input:valid + fieldset": {
      borderColor: "green",
      borderWidth: 2,
    },
    "& input:invalid + fieldset": {
      borderColor: "red",
      borderWidth: 2,
    },
    "& input:valid:focus + fieldset": {
      borderLeftWidth: 6,
      padding: "4px !important", // override inline-style
    },
  },
})(TextField);

/**
 * This is the signup component
 * History from withRouter to navigate after signing up
 * @param {history} param0
 */
const SignUp = ({ history }) => {
  const classes = useStyles();
  const { currentUser } = useContext(AuthContext);
  const [registrationValue, setRegistrationValue] = useState({
    password: "",
    confirmPassword: "",
    user_email: "",
    user_city: "",
    user_region: "",
    user_country: "",
  });
  const [showPassword, setShowPassword] = useState(false);

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const handleMouseDownPassword = (event) => {
    event.preventDefault();
  };

  /**
   * This creates authentication user and also database user with the same unique ID
   * generated by Firebase
   */
  async function accountSignup(e) {
    const db = firebase.firestore();
    try {
      const credential = await firebase
        .auth()
        .createUserWithEmailAndPassword(
          registrationValue.user_email,
          registrationValue.password
        );

      credential.user.sendEmailVerification();

      await db.collection("user").doc(credential.user.uid).set({
        user_email: registrationValue.user_email,
        user_city: registrationValue.user_city,
        user_region: registrationValue.user_region,
        user_country: registrationValue.user_country,
        claimedGift: [],
      });

      const addUserRole = firebase.functions().httpsCallable("addUserRole");
      addUserRole({ email: registrationValue.user_email }).then((result) => {
        console.log(result);
      });

      // Redirect user to user home page after signing up
      // history.push("/");
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <ThemeProvider theme={theme}>
      <div>
        <form className={classes.root} noValidate autoComplete="off">
          <div className={classes.formContainer}>
            <TextField
              id="filled-basic"
              label="Email"
              variant="filled"
              value={registrationValue.user_email}
              onChange={(e) =>
                setRegistrationValue({
                  ...registrationValue,
                  user_email: e.target.value,
                })
              }
            />
            <FormControl
              className={clsx(classes.margin, classes.textField)}
              variant="filled"
            >
              <InputLabel htmlFor="filled-adornment-password">
                Password
              </InputLabel>
              <FilledInput
                id="filled-adornment-password"
                type={showPassword ? "text" : "password"}
                value={registrationValue.password}
                onChange={(e) =>
                  setRegistrationValue({
                    ...registrationValue,
                    password: e.target.value,
                  })
                }
                endAdornment={
                  <InputAdornment position="end">
                    <IconButton
                      aria-label="toggle password visibility"
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      edge="end"
                    >
                      {showPassword ? <Visibility /> : <VisibilityOff />}
                    </IconButton>
                  </InputAdornment>
                }
              />
            </FormControl>
            <FormControl
              className={clsx(classes.margin, classes.textField)}
              variant="filled"
            >
              <InputLabel htmlFor="filled-adornment-password">
                Confirm Password
              </InputLabel>
              <FilledInput
                id="filled-adornment-password"
                type={showPassword ? "text" : "password"}
                value={registrationValue.confirmPassword}
                onChange={(e) =>
                  setRegistrationValue({
                    ...registrationValue,
                    confirmPassword: e.target.value,
                  })
                }
                endAdornment={
                  <InputAdornment position="end">
                    <IconButton
                      aria-label="toggle password visibility"
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      edge="end"
                    >
                      {showPassword ? <Visibility /> : <VisibilityOff />}
                    </IconButton>
                  </InputAdornment>
                }
              />
            </FormControl>
            <TextField
              id="filled-basic"
              label="City"
              variant="filled"
              value={registrationValue.user_city}
              onChange={(e) =>
                setRegistrationValue({
                  ...registrationValue,
                  user_city: e.target.value,
                })
              }
            />
            <div className={classes.countryContainer}>
              <CountryDropdown
                value={registrationValue.user_country}
                onChange={(country) =>
                  setRegistrationValue({
                    ...registrationValue,
                    user_country: country,
                  })
                }
                whitelist={["CA", "US"]}
                priorityOptions={["CA", "US"]}
                classes="userSignup_selectCountry"
              />
            </div>
            <div className={classes.regionContainer}>
              <RegionDropdown
                disableWhenEmpty={true}
                country={registrationValue.user_country}
                value={registrationValue.user_region}
                disableWhenEmpty={true}
                onChange={(region) =>
                  setRegistrationValue({
                    ...registrationValue,
                    user_region: region,
                  })
                }
                classes="userSignup_selectRegion"
              />
            </div>
            <Button
              className={classes.userSignup_saveButton}
              onClick={accountSignup}
            >
              SIGN UP
            </Button>
          </div>
        </form>
      </div>
    </ThemeProvider>
  );
};

export default withRouter(SignUp);

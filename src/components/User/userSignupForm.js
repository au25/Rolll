import React, { useState } from "react";
import { withStyles, makeStyles } from "@material-ui/core/styles";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import { withRouter } from "react-router";
import firebase from "../../firebase";
// Required for side-effects
require("firebase/functions");

/**
 * CSS of the page
 */
const CssTextField = withStyles({
  root: {
    "& label.Mui-focused": {
      color: "green"
    },
    "& .MuiInput-underline:after": {
      borderBottomColor: "green"
    },
    "& .MuiOutlinedInput-root": {
      "& fieldset": {
        borderColor: "red"
      },
      "&:hover fieldset": {
        borderColor: "yellow"
      },
      "&.Mui-focused fieldset": {
        borderColor: "green"
      }
    }
  }
})(TextField);

const useStyles = makeStyles(theme => ({
  signupFormContainer: {
    display: "flex",
    flexDirection: "column"
  }
}));

/**
 * Currently unused validation styles
 */
const ValidationTextField = withStyles({
  root: {
    "& input:valid + fieldset": {
      borderColor: "green",
      borderWidth: 2
    },
    "& input:invalid + fieldset": {
      borderColor: "red",
      borderWidth: 2
    },
    "& input:valid:focus + fieldset": {
      borderLeftWidth: 6,
      padding: "4px !important" // override inline-style
    }
  }
})(TextField);

/**
 * This is the signup component
 * History from withRouter to navigate after signing up
 * @param {history} param0
 */
const SignUp = ({ history }) => {
  const classes = useStyles();
  const [value, setValue] = useState({
    password: "",
    confirmPassword: "",
    email: ""
  });

  /**
   * This creates authentication user and also database user with the same unique ID
   * generated by Firebase
   */
  async function accountSignup(e) {
    const db = firebase.firestore();
    try {
      const credential = await firebase
        .auth()
        .createUserWithEmailAndPassword(value.email, value.password);
      await db
        .collection("user")
        .doc(credential.user.uid)
        .set({
          email: value.email,
          giftLocationView: ""
        });

      const addUserRole = firebase.functions().httpsCallable("addUserRole");
      addUserRole({ email: value.email }).then(result => {
        console.log(result);
      });

      // Redirect user to user home page after signing up
      // history.push("/");
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <form className={classes.signupFormContainer} noValidate>
      <CssTextField
        label="Email"
        onChange={e => setValue({ ...value, email: e.target.value })}
      />
      <CssTextField
        type="password"
        label="Password"
        onChange={e => setValue({ ...value, password: e.target.value })}
      />
      <CssTextField
        type="password"
        label="Confirm Password"
        onChange={e => setValue({ ...value, confirmPassword: e.target.value })}
      />
      <Button variant="contained" onClick={accountSignup}>
        SIGN UP
      </Button>
    </form>
  );
};

export default withRouter(SignUp);

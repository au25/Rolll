import React, { useState } from "react";
import { withStyles, makeStyles } from "@material-ui/core/styles";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import { withRouter } from "react-router";
import firebase from "../../firebase";
import {
  CountryDropdown,
  RegionDropdown,
  CountryRegionData,
} from "react-country-region-selector";
// Required for side-effects
require("firebase/functions");

/**
 * CSS of the page
 */
const CssTextField = withStyles({
  root: {
    "& label.Mui-focused": {
      color: "green",
    },
    "& .MuiInput-underline:after": {
      borderBottomColor: "green",
    },
    "& .MuiOutlinedInput-root": {
      "& fieldset": {
        borderColor: "red",
      },
      "&:hover fieldset": {
        borderColor: "yellow",
      },
      "&.Mui-focused fieldset": {
        borderColor: "green",
      },
    },
  },
})(TextField);

const useStyles = makeStyles((theme) => ({
  signupFormContainer: {
    display: "flex",
    flexDirection: "column",
  },
}));

/**
 * Currently unused validation styles
 */
const ValidationTextField = withStyles({
  root: {
    "& input:valid + fieldset": {
      borderColor: "green",
      borderWidth: 2,
    },
    "& input:invalid + fieldset": {
      borderColor: "red",
      borderWidth: 2,
    },
    "& input:valid:focus + fieldset": {
      borderLeftWidth: 6,
      padding: "4px !important", // override inline-style
    },
  },
})(TextField);

/**
 * This is the signup component
 * History from withRouter to navigate after signing up
 * @param {history} param0
 */
const SignUp = ({ history }) => {
  const [giftRecord, setGiftRecord] = useState({});
  const classes = useStyles();
  const [registrationValue, setRegistrationValue] = useState({
    password: "",
    confirmPassword: "",
    shop_name: "",
    shop_address: "",
    shop_city: "",
    shop_region: "", //province or state or territory
    shop_country: "",
    shop_number: "",
    first_name: "",
    last_name: "",
    phone_number: "",
    email: "",
  });

  /**
   * This creates authentication user and also database user with the same unique ID
   * generated by Firebase
   */
  async function accountSignup(e) {
    const db = firebase.firestore();
    console.log(registrationValue);
    try {
      const credential = await firebase
        .auth()
        .createUserWithEmailAndPassword(
          registrationValue.email,
          registrationValue.password
        );
      await db
        .collection("businessUser")
        .doc(credential.user.uid)
        .set({
          shop: [
            {
              shop_name: registrationValue.shop_name,
              shop_address: registrationValue.shop_address,
              shop_city: registrationValue.shop_city,
              shop_region: registrationValue.shop_region,
              shop_country: registrationValue.shop_country
            },
          ],
          first_name: registrationValue.first_name,
          last_name: registrationValue.last_name,
          phone_number: registrationValue.phone_number,
          email: registrationValue.email,
          is_approve: "false",
          gift: [
            {
              gift_name: "defaultGift-template1"
            },
            {
              gift_name: "defaultGift-template2"
            }
          ]
        });
    } catch (error) {
      console.log(error);
    }

    // Adds "shop role" to account after account creation
    const addBusinessUserRole = await firebase
      .functions()
      .httpsCallable("addBusinessUserRole");
    addBusinessUserRole({ email: registrationValue.email }).then((result) => {
      console.log(result);
    });

    // history.push("/businessHome");
  }

  return (
    <form className={classes.signupFormContainer} noValidate>
      <CssTextField
        label="Shop Name"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            shop_name: e.target.value,
          })
        }
      />
      <CssTextField
        label="Shop Address"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            shop_address: e.target.value,
          })
        }
      />
      <CssTextField
        label="City"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            shop_city: e.target.value,
          })
        }
      />
      <CountryDropdown
        value={registrationValue.shop_country}
        onChange={(country) =>
          setRegistrationValue({ ...registrationValue, shop_country: country })
        }
        whitelist={["CA", "US"]}
        priorityOptions={["CA", "US"]}
      />
      <RegionDropdown
        disableWhenEmpty={true}
        country={registrationValue.shop_country}
        value={registrationValue.shop_region}
        onChange={(region) =>
          setRegistrationValue({ ...registrationValue, shop_region: region })
        }
      />

      <br />

      <CssTextField
        label="First Name"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            first_name: e.target.value,
          })
        }
      />

      <CssTextField
        label="Last Name"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            last_name: e.target.value,
          })
        }
      />

      <CssTextField
        label="Phone Number"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            phone_number: e.target.value,
          })
        }
      />

      <br />
      <CssTextField
        label="Email"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            email: e.target.value,
          })
        }
      />
      <CssTextField
        type="password"
        label="Password"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            password: e.target.value,
          })
        }
      />
      <CssTextField
        type="password"
        label="Confirm Password"
        onChange={(e) =>
          setRegistrationValue({
            ...registrationValue,
            confirmPassword: e.target.value,
          })
        }
      />
      <Button variant="contained" onClick={accountSignup}>
        SIGN UP
      </Button>
    </form>
  );
};

export default withRouter(SignUp);
